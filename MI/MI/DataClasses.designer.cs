#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LISTMUSIC")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertALBUM(ALBUM instance);
    partial void UpdateALBUM(ALBUM instance);
    partial void DeleteALBUM(ALBUM instance);
    partial void InsertEMOTION(EMOTION instance);
    partial void UpdateEMOTION(EMOTION instance);
    partial void DeleteEMOTION(EMOTION instance);
    partial void InsertPLAYLIST(PLAYLIST instance);
    partial void UpdatePLAYLIST(PLAYLIST instance);
    partial void DeletePLAYLIST(PLAYLIST instance);
    partial void InsertSINGER(SINGER instance);
    partial void UpdateSINGER(SINGER instance);
    partial void DeleteSINGER(SINGER instance);
    partial void InsertSONG(SONG instance);
    partial void UpdateSONG(SONG instance);
    partial void DeleteSONG(SONG instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::MI.Properties.Settings.Default.LISTMUSICConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ALBUM> ALBUMs
		{
			get
			{
				return this.GetTable<ALBUM>();
			}
		}
		
		public System.Data.Linq.Table<EMOTION> EMOTIONs
		{
			get
			{
				return this.GetTable<EMOTION>();
			}
		}
		
		public System.Data.Linq.Table<PLAYLIST> PLAYLISTs
		{
			get
			{
				return this.GetTable<PLAYLIST>();
			}
		}
		
		public System.Data.Linq.Table<SINGER> SINGERs
		{
			get
			{
				return this.GetTable<SINGER>();
			}
		}
		
		public System.Data.Linq.Table<SONG> SONGs
		{
			get
			{
				return this.GetTable<SONG>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ALBUM")]
	public partial class ALBUM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ALBUMID;
		
		private string _ALBUMNAME;
		
		private string _SINGERID;
		
		private System.Nullable<int> _QUANTITY;
		
		private System.Nullable<System.DateTime> _ISSUE;
		
		private string _DESCRIBE;
		
		private EntitySet<SONG> _SONGs;
		
		private EntityRef<SINGER> _SINGER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnALBUMIDChanging(string value);
    partial void OnALBUMIDChanged();
    partial void OnALBUMNAMEChanging(string value);
    partial void OnALBUMNAMEChanged();
    partial void OnSINGERIDChanging(string value);
    partial void OnSINGERIDChanged();
    partial void OnQUANTITYChanging(System.Nullable<int> value);
    partial void OnQUANTITYChanged();
    partial void OnISSUEChanging(System.Nullable<System.DateTime> value);
    partial void OnISSUEChanged();
    partial void OnDESCRIBEChanging(string value);
    partial void OnDESCRIBEChanged();
    #endregion
		
		public ALBUM()
		{
			this._SONGs = new EntitySet<SONG>(new Action<SONG>(this.attach_SONGs), new Action<SONG>(this.detach_SONGs));
			this._SINGER = default(EntityRef<SINGER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALBUMID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ALBUMID
		{
			get
			{
				return this._ALBUMID;
			}
			set
			{
				if ((this._ALBUMID != value))
				{
					this.OnALBUMIDChanging(value);
					this.SendPropertyChanging();
					this._ALBUMID = value;
					this.SendPropertyChanged("ALBUMID");
					this.OnALBUMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALBUMNAME", DbType="NVarChar(50)")]
		public string ALBUMNAME
		{
			get
			{
				return this._ALBUMNAME;
			}
			set
			{
				if ((this._ALBUMNAME != value))
				{
					this.OnALBUMNAMEChanging(value);
					this.SendPropertyChanging();
					this._ALBUMNAME = value;
					this.SendPropertyChanged("ALBUMNAME");
					this.OnALBUMNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SINGERID", DbType="NVarChar(50)")]
		public string SINGERID
		{
			get
			{
				return this._SINGERID;
			}
			set
			{
				if ((this._SINGERID != value))
				{
					if (this._SINGER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSINGERIDChanging(value);
					this.SendPropertyChanging();
					this._SINGERID = value;
					this.SendPropertyChanged("SINGERID");
					this.OnSINGERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUANTITY", DbType="Int")]
		public System.Nullable<int> QUANTITY
		{
			get
			{
				return this._QUANTITY;
			}
			set
			{
				if ((this._QUANTITY != value))
				{
					this.OnQUANTITYChanging(value);
					this.SendPropertyChanging();
					this._QUANTITY = value;
					this.SendPropertyChanged("QUANTITY");
					this.OnQUANTITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISSUE", DbType="Date")]
		public System.Nullable<System.DateTime> ISSUE
		{
			get
			{
				return this._ISSUE;
			}
			set
			{
				if ((this._ISSUE != value))
				{
					this.OnISSUEChanging(value);
					this.SendPropertyChanging();
					this._ISSUE = value;
					this.SendPropertyChanged("ISSUE");
					this.OnISSUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIBE", DbType="NVarChar(MAX)")]
		public string DESCRIBE
		{
			get
			{
				return this._DESCRIBE;
			}
			set
			{
				if ((this._DESCRIBE != value))
				{
					this.OnDESCRIBEChanging(value);
					this.SendPropertyChanging();
					this._DESCRIBE = value;
					this.SendPropertyChanged("DESCRIBE");
					this.OnDESCRIBEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ALBUM_SONG", Storage="_SONGs", ThisKey="ALBUMID", OtherKey="ALBUMID")]
		public EntitySet<SONG> SONGs
		{
			get
			{
				return this._SONGs;
			}
			set
			{
				this._SONGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINGER_ALBUM", Storage="_SINGER", ThisKey="SINGERID", OtherKey="SINGERID", IsForeignKey=true)]
		public SINGER SINGER
		{
			get
			{
				return this._SINGER.Entity;
			}
			set
			{
				SINGER previousValue = this._SINGER.Entity;
				if (((previousValue != value) 
							|| (this._SINGER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SINGER.Entity = null;
						previousValue.ALBUMs.Remove(this);
					}
					this._SINGER.Entity = value;
					if ((value != null))
					{
						value.ALBUMs.Add(this);
						this._SINGERID = value.SINGERID;
					}
					else
					{
						this._SINGERID = default(string);
					}
					this.SendPropertyChanged("SINGER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SONGs(SONG entity)
		{
			this.SendPropertyChanging();
			entity.ALBUM = this;
		}
		
		private void detach_SONGs(SONG entity)
		{
			this.SendPropertyChanging();
			entity.ALBUM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMOTION")]
	public partial class EMOTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EMOTIONID;
		
		private string _EMOTIONTYPE;
		
		private string _DESCRIPTION;
		
		private EntitySet<SONG> _SONGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMOTIONIDChanging(int value);
    partial void OnEMOTIONIDChanged();
    partial void OnEMOTIONTYPEChanging(string value);
    partial void OnEMOTIONTYPEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    #endregion
		
		public EMOTION()
		{
			this._SONGs = new EntitySet<SONG>(new Action<SONG>(this.attach_SONGs), new Action<SONG>(this.detach_SONGs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMOTIONID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EMOTIONID
		{
			get
			{
				return this._EMOTIONID;
			}
			set
			{
				if ((this._EMOTIONID != value))
				{
					this.OnEMOTIONIDChanging(value);
					this.SendPropertyChanging();
					this._EMOTIONID = value;
					this.SendPropertyChanged("EMOTIONID");
					this.OnEMOTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMOTIONTYPE", DbType="NVarChar(50)")]
		public string EMOTIONTYPE
		{
			get
			{
				return this._EMOTIONTYPE;
			}
			set
			{
				if ((this._EMOTIONTYPE != value))
				{
					this.OnEMOTIONTYPEChanging(value);
					this.SendPropertyChanging();
					this._EMOTIONTYPE = value;
					this.SendPropertyChanged("EMOTIONTYPE");
					this.OnEMOTIONTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTION", DbType="NVarChar(MAX)")]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMOTION_SONG", Storage="_SONGs", ThisKey="EMOTIONID", OtherKey="EMOTIONID")]
		public EntitySet<SONG> SONGs
		{
			get
			{
				return this._SONGs;
			}
			set
			{
				this._SONGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SONGs(SONG entity)
		{
			this.SendPropertyChanging();
			entity.EMOTION = this;
		}
		
		private void detach_SONGs(SONG entity)
		{
			this.SendPropertyChanging();
			entity.EMOTION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PLAYLIST")]
	public partial class PLAYLIST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NAMELIST;
		
		private System.Nullable<System.DateTime> _PUBLISH;
		
		private string _DESCRIPTION;
		
		private int _PLAYLISTID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNAMELISTChanging(string value);
    partial void OnNAMELISTChanged();
    partial void OnPUBLISHChanging(System.Nullable<System.DateTime> value);
    partial void OnPUBLISHChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    partial void OnPLAYLISTIDChanging(int value);
    partial void OnPLAYLISTIDChanged();
    #endregion
		
		public PLAYLIST()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAMELIST", DbType="NVarChar(50)")]
		public string NAMELIST
		{
			get
			{
				return this._NAMELIST;
			}
			set
			{
				if ((this._NAMELIST != value))
				{
					this.OnNAMELISTChanging(value);
					this.SendPropertyChanging();
					this._NAMELIST = value;
					this.SendPropertyChanged("NAMELIST");
					this.OnNAMELISTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PUBLISH", DbType="DateTime")]
		public System.Nullable<System.DateTime> PUBLISH
		{
			get
			{
				return this._PUBLISH;
			}
			set
			{
				if ((this._PUBLISH != value))
				{
					this.OnPUBLISHChanging(value);
					this.SendPropertyChanging();
					this._PUBLISH = value;
					this.SendPropertyChanged("PUBLISH");
					this.OnPUBLISHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTION", DbType="NVarChar(MAX)")]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLAYLISTID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PLAYLISTID
		{
			get
			{
				return this._PLAYLISTID;
			}
			set
			{
				if ((this._PLAYLISTID != value))
				{
					this.OnPLAYLISTIDChanging(value);
					this.SendPropertyChanging();
					this._PLAYLISTID = value;
					this.SendPropertyChanged("PLAYLISTID");
					this.OnPLAYLISTIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SINGER")]
	public partial class SINGER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SINGERID;
		
		private string _SINGERNAME;
		
		private string _REALNAME;
		
		private string _CITIZENSHIP;
		
		private System.Nullable<System.DateTime> _BIRTHDAY;
		
		private string _COMPANY;
		
		private string _AVATAR;
		
		private EntitySet<ALBUM> _ALBUMs;
		
		private EntitySet<SONG> _SONGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSINGERIDChanging(string value);
    partial void OnSINGERIDChanged();
    partial void OnSINGERNAMEChanging(string value);
    partial void OnSINGERNAMEChanged();
    partial void OnREALNAMEChanging(string value);
    partial void OnREALNAMEChanged();
    partial void OnCITIZENSHIPChanging(string value);
    partial void OnCITIZENSHIPChanged();
    partial void OnBIRTHDAYChanging(System.Nullable<System.DateTime> value);
    partial void OnBIRTHDAYChanged();
    partial void OnCOMPANYChanging(string value);
    partial void OnCOMPANYChanged();
    partial void OnAVATARChanging(string value);
    partial void OnAVATARChanged();
    #endregion
		
		public SINGER()
		{
			this._ALBUMs = new EntitySet<ALBUM>(new Action<ALBUM>(this.attach_ALBUMs), new Action<ALBUM>(this.detach_ALBUMs));
			this._SONGs = new EntitySet<SONG>(new Action<SONG>(this.attach_SONGs), new Action<SONG>(this.detach_SONGs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SINGERID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SINGERID
		{
			get
			{
				return this._SINGERID;
			}
			set
			{
				if ((this._SINGERID != value))
				{
					this.OnSINGERIDChanging(value);
					this.SendPropertyChanging();
					this._SINGERID = value;
					this.SendPropertyChanged("SINGERID");
					this.OnSINGERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SINGERNAME", DbType="NVarChar(50)")]
		public string SINGERNAME
		{
			get
			{
				return this._SINGERNAME;
			}
			set
			{
				if ((this._SINGERNAME != value))
				{
					this.OnSINGERNAMEChanging(value);
					this.SendPropertyChanging();
					this._SINGERNAME = value;
					this.SendPropertyChanged("SINGERNAME");
					this.OnSINGERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REALNAME", DbType="NVarChar(50)")]
		public string REALNAME
		{
			get
			{
				return this._REALNAME;
			}
			set
			{
				if ((this._REALNAME != value))
				{
					this.OnREALNAMEChanging(value);
					this.SendPropertyChanging();
					this._REALNAME = value;
					this.SendPropertyChanged("REALNAME");
					this.OnREALNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITIZENSHIP", DbType="NVarChar(50)")]
		public string CITIZENSHIP
		{
			get
			{
				return this._CITIZENSHIP;
			}
			set
			{
				if ((this._CITIZENSHIP != value))
				{
					this.OnCITIZENSHIPChanging(value);
					this.SendPropertyChanging();
					this._CITIZENSHIP = value;
					this.SendPropertyChanged("CITIZENSHIP");
					this.OnCITIZENSHIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BIRTHDAY", DbType="Date")]
		public System.Nullable<System.DateTime> BIRTHDAY
		{
			get
			{
				return this._BIRTHDAY;
			}
			set
			{
				if ((this._BIRTHDAY != value))
				{
					this.OnBIRTHDAYChanging(value);
					this.SendPropertyChanging();
					this._BIRTHDAY = value;
					this.SendPropertyChanged("BIRTHDAY");
					this.OnBIRTHDAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMPANY", DbType="NVarChar(50)")]
		public string COMPANY
		{
			get
			{
				return this._COMPANY;
			}
			set
			{
				if ((this._COMPANY != value))
				{
					this.OnCOMPANYChanging(value);
					this.SendPropertyChanging();
					this._COMPANY = value;
					this.SendPropertyChanged("COMPANY");
					this.OnCOMPANYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVATAR", DbType="NVarChar(50)")]
		public string AVATAR
		{
			get
			{
				return this._AVATAR;
			}
			set
			{
				if ((this._AVATAR != value))
				{
					this.OnAVATARChanging(value);
					this.SendPropertyChanging();
					this._AVATAR = value;
					this.SendPropertyChanged("AVATAR");
					this.OnAVATARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINGER_ALBUM", Storage="_ALBUMs", ThisKey="SINGERID", OtherKey="SINGERID")]
		public EntitySet<ALBUM> ALBUMs
		{
			get
			{
				return this._ALBUMs;
			}
			set
			{
				this._ALBUMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINGER_SONG", Storage="_SONGs", ThisKey="SINGERID", OtherKey="SINGERID")]
		public EntitySet<SONG> SONGs
		{
			get
			{
				return this._SONGs;
			}
			set
			{
				this._SONGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ALBUMs(ALBUM entity)
		{
			this.SendPropertyChanging();
			entity.SINGER = this;
		}
		
		private void detach_ALBUMs(ALBUM entity)
		{
			this.SendPropertyChanging();
			entity.SINGER = null;
		}
		
		private void attach_SONGs(SONG entity)
		{
			this.SendPropertyChanging();
			entity.SINGER = this;
		}
		
		private void detach_SONGs(SONG entity)
		{
			this.SendPropertyChanging();
			entity.SINGER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SONG")]
	public partial class SONG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SONGID;
		
		private string _SONGNAME;
		
		private string _CATEGORY;
		
		private string _ALBUMID;
		
		private string _SINGERID;
		
		private string _LANGUAGE;
		
		private string _MUSICIAN;
		
		private string _LYRICS;
		
		private string _PUBLISH;
		
		private System.Nullable<int> _KARAOKE;
		
		private System.Nullable<int> _EMOTIONID;
		
		private System.Nullable<int> _PLAYLISTID;
		
		private string _INSTRUMENT;
		
		private System.Nullable<decimal> _VOTE;
		
		private EntityRef<ALBUM> _ALBUM;
		
		private EntityRef<SINGER> _SINGER;
		
		private EntityRef<EMOTION> _EMOTION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSONGIDChanging(int value);
    partial void OnSONGIDChanged();
    partial void OnSONGNAMEChanging(string value);
    partial void OnSONGNAMEChanged();
    partial void OnCATEGORYChanging(string value);
    partial void OnCATEGORYChanged();
    partial void OnALBUMIDChanging(string value);
    partial void OnALBUMIDChanged();
    partial void OnSINGERIDChanging(string value);
    partial void OnSINGERIDChanged();
    partial void OnLANGUAGEChanging(string value);
    partial void OnLANGUAGEChanged();
    partial void OnMUSICIANChanging(string value);
    partial void OnMUSICIANChanged();
    partial void OnLYRICSChanging(string value);
    partial void OnLYRICSChanged();
    partial void OnPUBLISHChanging(string value);
    partial void OnPUBLISHChanged();
    partial void OnKARAOKEChanging(System.Nullable<int> value);
    partial void OnKARAOKEChanged();
    partial void OnEMOTIONIDChanging(System.Nullable<int> value);
    partial void OnEMOTIONIDChanged();
    partial void OnPLAYLISTIDChanging(System.Nullable<int> value);
    partial void OnPLAYLISTIDChanged();
    partial void OnINSTRUMENTChanging(string value);
    partial void OnINSTRUMENTChanged();
    partial void OnVOTEChanging(System.Nullable<decimal> value);
    partial void OnVOTEChanged();
    #endregion
		
		public SONG()
		{
			this._ALBUM = default(EntityRef<ALBUM>);
			this._SINGER = default(EntityRef<SINGER>);
			this._EMOTION = default(EntityRef<EMOTION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SONGID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SONGID
		{
			get
			{
				return this._SONGID;
			}
			set
			{
				if ((this._SONGID != value))
				{
					this.OnSONGIDChanging(value);
					this.SendPropertyChanging();
					this._SONGID = value;
					this.SendPropertyChanged("SONGID");
					this.OnSONGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SONGNAME", DbType="NVarChar(50)")]
		public string SONGNAME
		{
			get
			{
				return this._SONGNAME;
			}
			set
			{
				if ((this._SONGNAME != value))
				{
					this.OnSONGNAMEChanging(value);
					this.SendPropertyChanging();
					this._SONGNAME = value;
					this.SendPropertyChanged("SONGNAME");
					this.OnSONGNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY", DbType="NVarChar(50)")]
		public string CATEGORY
		{
			get
			{
				return this._CATEGORY;
			}
			set
			{
				if ((this._CATEGORY != value))
				{
					this.OnCATEGORYChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY = value;
					this.SendPropertyChanged("CATEGORY");
					this.OnCATEGORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALBUMID", DbType="NVarChar(50)")]
		public string ALBUMID
		{
			get
			{
				return this._ALBUMID;
			}
			set
			{
				if ((this._ALBUMID != value))
				{
					if (this._ALBUM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnALBUMIDChanging(value);
					this.SendPropertyChanging();
					this._ALBUMID = value;
					this.SendPropertyChanged("ALBUMID");
					this.OnALBUMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SINGERID", DbType="NVarChar(50)")]
		public string SINGERID
		{
			get
			{
				return this._SINGERID;
			}
			set
			{
				if ((this._SINGERID != value))
				{
					if (this._SINGER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSINGERIDChanging(value);
					this.SendPropertyChanging();
					this._SINGERID = value;
					this.SendPropertyChanged("SINGERID");
					this.OnSINGERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LANGUAGE", DbType="NVarChar(50)")]
		public string LANGUAGE
		{
			get
			{
				return this._LANGUAGE;
			}
			set
			{
				if ((this._LANGUAGE != value))
				{
					this.OnLANGUAGEChanging(value);
					this.SendPropertyChanging();
					this._LANGUAGE = value;
					this.SendPropertyChanged("LANGUAGE");
					this.OnLANGUAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MUSICIAN", DbType="NVarChar(50)")]
		public string MUSICIAN
		{
			get
			{
				return this._MUSICIAN;
			}
			set
			{
				if ((this._MUSICIAN != value))
				{
					this.OnMUSICIANChanging(value);
					this.SendPropertyChanging();
					this._MUSICIAN = value;
					this.SendPropertyChanged("MUSICIAN");
					this.OnMUSICIANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LYRICS", DbType="NVarChar(MAX)")]
		public string LYRICS
		{
			get
			{
				return this._LYRICS;
			}
			set
			{
				if ((this._LYRICS != value))
				{
					this.OnLYRICSChanging(value);
					this.SendPropertyChanging();
					this._LYRICS = value;
					this.SendPropertyChanged("LYRICS");
					this.OnLYRICSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PUBLISH", DbType="NVarChar(50)")]
		public string PUBLISH
		{
			get
			{
				return this._PUBLISH;
			}
			set
			{
				if ((this._PUBLISH != value))
				{
					this.OnPUBLISHChanging(value);
					this.SendPropertyChanging();
					this._PUBLISH = value;
					this.SendPropertyChanged("PUBLISH");
					this.OnPUBLISHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KARAOKE", DbType="Int")]
		public System.Nullable<int> KARAOKE
		{
			get
			{
				return this._KARAOKE;
			}
			set
			{
				if ((this._KARAOKE != value))
				{
					this.OnKARAOKEChanging(value);
					this.SendPropertyChanging();
					this._KARAOKE = value;
					this.SendPropertyChanged("KARAOKE");
					this.OnKARAOKEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMOTIONID", DbType="Int")]
		public System.Nullable<int> EMOTIONID
		{
			get
			{
				return this._EMOTIONID;
			}
			set
			{
				if ((this._EMOTIONID != value))
				{
					if (this._EMOTION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMOTIONIDChanging(value);
					this.SendPropertyChanging();
					this._EMOTIONID = value;
					this.SendPropertyChanged("EMOTIONID");
					this.OnEMOTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLAYLISTID", DbType="Int")]
		public System.Nullable<int> PLAYLISTID
		{
			get
			{
				return this._PLAYLISTID;
			}
			set
			{
				if ((this._PLAYLISTID != value))
				{
					this.OnPLAYLISTIDChanging(value);
					this.SendPropertyChanging();
					this._PLAYLISTID = value;
					this.SendPropertyChanged("PLAYLISTID");
					this.OnPLAYLISTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INSTRUMENT", DbType="NVarChar(50)")]
		public string INSTRUMENT
		{
			get
			{
				return this._INSTRUMENT;
			}
			set
			{
				if ((this._INSTRUMENT != value))
				{
					this.OnINSTRUMENTChanging(value);
					this.SendPropertyChanging();
					this._INSTRUMENT = value;
					this.SendPropertyChanged("INSTRUMENT");
					this.OnINSTRUMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VOTE", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> VOTE
		{
			get
			{
				return this._VOTE;
			}
			set
			{
				if ((this._VOTE != value))
				{
					this.OnVOTEChanging(value);
					this.SendPropertyChanging();
					this._VOTE = value;
					this.SendPropertyChanged("VOTE");
					this.OnVOTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ALBUM_SONG", Storage="_ALBUM", ThisKey="ALBUMID", OtherKey="ALBUMID", IsForeignKey=true)]
		public ALBUM ALBUM
		{
			get
			{
				return this._ALBUM.Entity;
			}
			set
			{
				ALBUM previousValue = this._ALBUM.Entity;
				if (((previousValue != value) 
							|| (this._ALBUM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ALBUM.Entity = null;
						previousValue.SONGs.Remove(this);
					}
					this._ALBUM.Entity = value;
					if ((value != null))
					{
						value.SONGs.Add(this);
						this._ALBUMID = value.ALBUMID;
					}
					else
					{
						this._ALBUMID = default(string);
					}
					this.SendPropertyChanged("ALBUM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINGER_SONG", Storage="_SINGER", ThisKey="SINGERID", OtherKey="SINGERID", IsForeignKey=true)]
		public SINGER SINGER
		{
			get
			{
				return this._SINGER.Entity;
			}
			set
			{
				SINGER previousValue = this._SINGER.Entity;
				if (((previousValue != value) 
							|| (this._SINGER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SINGER.Entity = null;
						previousValue.SONGs.Remove(this);
					}
					this._SINGER.Entity = value;
					if ((value != null))
					{
						value.SONGs.Add(this);
						this._SINGERID = value.SINGERID;
					}
					else
					{
						this._SINGERID = default(string);
					}
					this.SendPropertyChanged("SINGER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMOTION_SONG", Storage="_EMOTION", ThisKey="EMOTIONID", OtherKey="EMOTIONID", IsForeignKey=true)]
		public EMOTION EMOTION
		{
			get
			{
				return this._EMOTION.Entity;
			}
			set
			{
				EMOTION previousValue = this._EMOTION.Entity;
				if (((previousValue != value) 
							|| (this._EMOTION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMOTION.Entity = null;
						previousValue.SONGs.Remove(this);
					}
					this._EMOTION.Entity = value;
					if ((value != null))
					{
						value.SONGs.Add(this);
						this._EMOTIONID = value.EMOTIONID;
					}
					else
					{
						this._EMOTIONID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EMOTION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
